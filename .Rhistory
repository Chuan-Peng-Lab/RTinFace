View(model_exguasian)
model_exguasian <- rt %>%
dplyr::select(rt,rating) %>%
na.omit() %>%
gamlss(formula = rt ~ rating,
data = rt,
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating,
data = rt,
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating) %>%
gamlss(formula = rt ~ rating,
data = rt,
na.omit(model_exguasian),
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating) %>%
na.omit(model_exguasian)# %>%
#gamlss(formula = rt ~ rating,
#       data = rt,
#       family = exGAUS()
#       )
View(rt)
#gamlss(formula = rt ~ rating,
#       data = rt,
#       family = exGAUS()
#       )
is.na(model_exguasian)
#gamlss(formula = rt ~ rating,
#       data = rt,
#       family = exGAUS()
#       )
unique(is.na(model_exguasian))
#gamlss(formula = rt ~ rating,
#       data = rt,
#       family = exGAUS()
#       )
unique(is.na(model_exguasian))
model_exguasian <- rt %>%
dplyr::select(rt,rating) %>%
na.omit(model_exguasian)# %>%
gamlss(formula = rt ~ rating,
data = .,
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating) %>%
na.omit(model_exguasian)# %>%
gamlss(formula = rt ~ rating,
data = model_exguasian,
family = exGAUS()
)
summary(model_exguasian)
model_exguasian <- rt %>%
dplyr::select(rt,rating) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating,
data = model_exguasian,
family = exGAUS()
)
summary(model_exguasian)
model_exguasian <- rt %>%
dplyr::select(rt,rating) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS()
)
rt <- read.csv("./data/rt_tidy.csv")
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
na.omit(model_exguasian) #%>%
gamlss(formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS()
)
summary(model_exguasian)
con <- gamlss.control(n.cyc = 750)
View(con)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS(),
mu.start = 0.5,k=6,control=con,data = na.omit(DFNoErrors)
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS(),
control=con,data = na.omit(DFNoErrors)
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
na.omit(model_exguasian) %>%
gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS(),
control=con
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = model_exguasian,
family = exGAUS(),
control = con,
data = na.omit(model_exguasian)
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = na.omit(model_exguasian),
family = exGAUS(),
control = con
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = na.omit(model_exguasian),
family = exGAUS()
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) %>%
gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = na.omit(model_exguasian),
family = exGAUS(),
control = con
)
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) #%>%
model <- gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = na.omit(model_exguasian),
family = exGAUS(),
control = con
)
summary(model_exguasian)
summary(model)
library(usethis)
usethis::edit_r_environ(scope = "project")
library("devtools")
devtools::install_github("MichelNivard/gptstudio")
devtools::install_github("MichelNivard/gptstudio")
gptstudio::addin_chatgpt()
gptstudio::addin_chatgpt()
Sys.setenv(OPENAI_API_KEY = "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")
gptstudio::addin_chatgpt()
download.file("https://cran.r-project.org/src/contrib/openai_0.3.0.tar.gz","openai_0.3.0.tar.gz")
devtools:::document()
gptstudio::addin_chatgpt()
library("tidyverse")
library("gamlss")
library(broom.mixed)
library(kableExtra)#print table
con <- gamlss.control(n.cyc = 750)
rt <- read.csv("./data/rt_tidy.csv")
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) #%>%
model <- gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = na.omit(model_exguasian),
family = exGAUS(),
control = con
)
summary(model)
summary(model)
View(model_exguasian)
View(model)
library("tidyverse")
library("gamlss")
library(broom.mixed)
library(kableExtra)#print table
con <- gamlss.control(n.cyc = 750)
rt <- read.csv("./data/rt_tidy.csv")
model_exguasian <- rt %>%
dplyr::select(rt,rating,Gender,Race) #%>%
model <- gamlss(formula = rt ~ rating + Gender + Race,
sigma.formula = rt ~ rating + Gender + Race,
nu.formula = rt ~ rating + Gender + Race,
data = na.omit(model_exguasian),
family = exGAUS(),
control = con
)
summary(model)
model
summary(model)
library("tidyverse")
library("gamlss")
summary(model)
View(model)
chatgpt:::run_addin_ask_chatgpt()
chatgpt:::run_addin_ask_chatgpt()
library(tidyverse)
library(bruceR)
rawdata <- read.csv("./data/rt_tidy.csv")
View(rawdata)
rownames(rawdata)
colnames(rawdata)
rawdata <- rawdata %>%
dplyr::select(trait, rt, rating, sex, age, ethnicity.y, gender) %>%
na.omit()
rawdata <- read.csv("./data/rt_tidy.csv")
rawdata <- rawdata %>%
dplyr::select(trait, rt, rating, sex, age, ethnicity.y, gender) %>%
na.omit()
rawdata <- rawdata %>%
mutate(rt_centered = rt - mean(rt)) %>%
mutate(rating_centered = rating - mean(rating))
HGLM_model <- lmer(formula = rating ~ rt + trait +trait*rt
+ sex + age + ethnicity.y + gender,
data = rawdata
)
HGLM_model <- lmer(formula = rating ~ rt + trait +trait*rt
+ sex + age + ethnicity.y + gender+
(1 + rt | trait),
data = rawdata
)
HLM_summary(HGLM_model)
HGLM_model <- lmer(formula = rating ~ rt_centered + trait +trait*rt_centered
+ sex + age + ethnicity.y + gender+
(1 + rt_centered | trait),
data = rawdata
)
HLM_summary(HGLM_model)
HGLM_model <- lmer(formula = rating ~ rt_centered + trait*rt_centered +
(1 + rt_centered | trait),
data = rawdata
)
HLM_summary(HGLM_model)
HGLM_model <- lmer(formula = rating ~ rt_centered +
(1 + rt_centered | trait),
data = rawdata
)
HLM_summary(HGLM_model)
HGLM_model <- lmer(formula = rt_centered ~ rating +
(1 + rating | trait),
data = rawdata
)
library(tidyverse)
library(bruceR)
rawdata <- read.csv("./data/rt_tidy.csv")
colnames(rawdata)
rawdata <- rawdata %>%
dplyr::select(trait, rt, rating, sex, age, ethnicity.y, gender) %>%
na.omit()
rawdata <- rawdata %>%
mutate(rt_centered = rt - mean(rt)) %>%
mutate(rating_centered = rating - mean(rating))
HGLM_model <- lmer(formula = rt_centered ~ rating +
(1 + rating | trait),
data = rawdata
)
HLM_summary(HGLM_model)
View(rawdata)
library(tidyverse)
library(ggplot2)
#install.packages("infotheo")
library(infotheo)
#install.packages("dplyr")
library(dplyr)
#load data
rt_rating = read.csv("data/psa001_ratings_raw_subset.csv")
rt_rating_positive = rt_rating[which(rt_rating$rt>0), ]
stim_info = read.csv("data/stim_info.csv")
#join rt_rating with necessary stimulus information
rt_rating_pos_full = full_join (rt_rating_positive, stim_info, by = 'stim_id')
#know the distribution
ggplot(data = rt_rating_pos_full,
mapping = aes(x=rating, y = rt,))+
geom_boxplot()
summary(rt_rating_pos_full$rt)
#exclude extreme variables
rt_tidy = filter(rt_rating_pos_full, rt<5000)
write.csv(rt_tidy, "data/rt_tidy.csv")
olddata <- read.csv("data/TrainSet.csv")
oldranger_model <- olddata %>%
select(rating, rt, Race, Gender, Age, trait)
oldrf <- ranger(dependent.variable.name = "rating",
data = oldranger_model, # 指定训练数据集
num.trees = 1000, # 指定树的数量
mtry = 3, # 指定每个树节点随机选择的属性数量
importance = "permutation",  # 指定特征重要性估计的方法
sample.fraction = 0.7,  # 指定随机采样的比例
verbose = TRUE
)
library("tidyverse")
library("xgboost")
library("randomForest")
library("ranger")
set.seed(1122)
oldranger_model <- olddata %>%
select(rating, rt, Race, Gender, Age, trait)
oldrf <- ranger(dependent.variable.name = "rating",
data = oldranger_model, # 指定训练数据集
num.trees = 1000, # 指定树的数量
mtry = 3, # 指定每个树节点随机选择的属性数量
importance = "permutation",  # 指定特征重要性估计的方法
sample.fraction = 0.7,  # 指定随机采样的比例
verbose = TRUE
)
oldrf_importance <- importance(oldrf)
oldimportance_df <- data.frame(feature = names(oldrf$variable.importance),
importance = oldrf$variable.importance)
ggplot(oldimportance_df, aes(x = reorder(feature,importance), y = importance)) +
geom_bar(stat = "identity", fill = "steelblue") +
ggtitle("Feature Importance Plot") +
coord_flip()+
xlab("Features") +
geom_text(aes(label = importance), size=3, hjust = 0.8)+
ylab("Importance")
HGLM_model <- lmer(formula = rt_centered ~ rating +
(rating | trait),
data = rawdata
)
HLM_summary(HGLM_model)
HGLM_model <- lmer(formula = rt ~ rating +
(1 + rating | trait),
data = rawdata
)
HLM_summary(HGLM_model)
rf_importance <- importance(rf)
ranger_model <- fulldata %>%
select(rating, rt, Race, Gender, Age, trait)
fulldata <- read.csv("data/rt_tidy.csv")
olddata <- read.csv("data/TrainSet.csv")
ranger_model <- fulldata %>%
select(rating, rt, Race, Gender, Age, trait)
rf <- ranger(dependent.variable.name = "rating",
data = ranger_model, # 指定训练数据集
num.trees = 1000, # 指定树的数量
mtry = 3, # 指定每个树节点随机选择的属性数量
importance = "permutation",  # 指定特征重要性估计的方法
sample.fraction = 0.7,  # 指定随机采样的比例
verbose = TRUE
)
gc()
gc()
gc()
fulldata <- read.csv("data/rt_tidy.csv")
olddata <- read.csv("data/TrainSet.csv")
ranger_model <- fulldata %>%
select(rating, rt, Race, Gender, Age, trait)
rf <- ranger(dependent.variable.name = "rating",
data = ranger_model, # 指定训练数据集
num.trees = 1000, # 指定树的数量
mtry = 3, # 指定每个树节点随机选择的属性数量
importance = "permutation",  # 指定特征重要性估计的方法
sample.fraction = 0.7,  # 指定随机采样的比例
verbose = TRUE
)
gc()
library("MASS")
library("tidyverse")
library("fitdistrplus")
library("nortest")
library("purrr")
fulldata <- read.csv("data/TrainSet.csv")#这个文件哪里来的？我记不得了
fulldata <- fulldata[complete.cases(fulldata$rt), ]#去除NA的rt
fulldata <- fulldata %>%
filter(rt>0 & rt<10000) #删去负的和过长的反应时
summary(fulldata)
fulldata %>%
ggplot(aes(x=rt))+
geom_histogram() +
xlab("Reaction Time") +
theme_bw()
fulldata <- fulldata[complete.cases(fulldata$rt), ]#去除NA的rt
fulldata <- fulldata %>%
filter(rt>0 & rt<10000) #删去负的和过长的反应时
summary(fulldata)
fulldata %>%
ggplot(aes(x=rt))+
geom_histogram() +
xlab("Reaction Time") +
theme_bw()
fulldata$log_rt <- log(fulldata$rt)
fulldata %>%
ggplot(aes(x=log_rt))+
geom_histogram() +
xlab("Reaction Time") +
xlim(2.5,12.5)+
theme_bw()
#根据正态分布去除末尾的值
fulldata <- fulldata %>%
filter(rt>245)
fulldata %>%
ggplot(aes(x=log_rt))+
geom_histogram() +
xlab("Reaction Time") +
xlim(2.5,12.5)+
theme_bw()
# 从数据框中抽取50个样本
sampled_data <- sample(fulldata$user_id,50)
sampledata <- fulldata %>%
filter(user_id %in% sampled_data)
sampledata %>%
ggplot(aes(x=rt))+
geom_histogram()+
facet_wrap("~user_id")
write.csv(fulldata,"./data/rt_tidy.csv")
fulldata <- read.csv("data/rt_tidy.csv")
olddata <- read.csv("data/TrainSet.csv")
ranger_model <- fulldata %>%
select(rating, rt, Race, Gender, Age, trait)
ranger_model <- fulldata %>%
select(rating, rt, Race, Gender, Age, trait)
ranger_model <- fulldata %>%
dplyr::select(rating, rt, Race, Gender, Age, trait)
rf <- ranger(dependent.variable.name = "rating",
data = ranger_model, # 指定训练数据集
num.trees = 1000, # 指定树的数量
mtry = 3, # 指定每个树节点随机选择的属性数量
importance = "permutation",  # 指定特征重要性估计的方法
sample.fraction = 0.7,  # 指定随机采样的比例
verbose = TRUE
)
rf_importance <- importance(rf)
importance_df <- data.frame(feature = names(rf$variable.importance),
importance = rf$variable.importance)
new <- ggplot(importance_df, aes(x = reorder(feature,importance), y = importance)) +
geom_bar(stat = "identity", fill = "steelblue") +
ggtitle("Feature Importance Plot") +
coord_flip()+
xlab("Features") +
geom_text(aes(label = importance), size=3, hjust = 0.8)+
ylab("Importance")
View(new)
new
oldranger_model <- olddata %>%
select(rating, rt, Race, Gender, Age, trait)
oldranger_model <- olddata %>%
dplyr::select(rating, rt, Race, Gender, Age, trait)
oldrf <- ranger(dependent.variable.name = "rating",
data = oldranger_model, # 指定训练数据集
num.trees = 1000, # 指定树的数量
mtry = 3, # 指定每个树节点随机选择的属性数量
importance = "permutation",  # 指定特征重要性估计的方法
sample.fraction = 0.7,  # 指定随机采样的比例
verbose = TRUE
)
oldrf_importance <- importance(oldrf)
oldimportance_df <- data.frame(feature = names(oldrf$variable.importance),
importance = oldrf$variable.importance)
old <- ggplot(oldimportance_df, aes(x = reorder(feature,importance), y = importance)) +
geom_bar(stat = "identity", fill = "steelblue") +
ggtitle("Feature Importance Plot") +
coord_flip()+
xlab("Features") +
geom_text(aes(label = importance), size=3, hjust = 0.8)+
ylab("Importance")
old
new/old
library("cowplot")
plot_grid(new, old, nrow = 1)
gptstudio:::addin_chatgpt()
install.packages("curl")
install.packages("curl")
gptstudio:::addin_chatgpt()
